Algorithms
 - set of instructions

Algorithm analysis
 - based on space & time complexity.

Abstract Data Types 
 - a data wth associated operations of it.
   Ex: array indexing in java.

Space complexity
 - less memory


Linear search 
  - ordinary way based on the length

Binary search
 - only works for sorted array
 - halfing the length
 - based on starting and ending points


Time complexity 
  - how running time of an algorithm increases with size of input data 

Big O Notation 
  - to understand the time complexity


O(n) : Linear Time
 - If the number of elements (n) in the array increases, 
    the time also increases. 
  -Ex: Linear search

O(log n) : Logarithmic time
  - ex: Binary search
  -  Between O(1) and O(n)
  -  log2(8) = 3
  -  log2(16) = 4
  - One step only increases when value gets doubled.

Sorting 
 Bubble sort : O(n)2 : Quadratic time
 - not efficient but simple to understand 
 - sorting the array in the ascending or descending order
 - By swapping the 2 items in an order in n iterations.
 - Ex: for 6 items , we need 5 iterations.
 - swapping occurs for every iterations in inner loop

 Selection sort: O(n)2
  - selecting an item as largest.
  - comparing it with all items.
  - if it is largest, swaping it with the last element.
  - Then , doing iterations for others.
  - swapping occurs at the outer loop.

 Insertion sort 
 - Putting elements at the right location 
 - Shifting occurs here
 - Like playing cards 
 - Comparing the items with all others to change it's position.
 
 Quick Sort: O(n log(n)) 
 - Divide & Conquer 
 - using recursion 
 - Pivot - central point of the problem 
 - we get tree structure here 
 

Divide & Conquer & Combine 

Tree 
 - Branch from the Root element 

Binary Tree 
 - Branch for each element is only two


Recursion 
 - function calling itself 


 Merge sort: O(n log(n))
  - Divide  by finding the mid index 
  - Divide until getting the single element 
  - compare with each other & find small element & add to array 

updating array in the middle is tough, so we using Linked list.

LinkedList: 
 - Node 
   - every node has a data and ref to next node.
 - ref/address
 - Head 
   - points to the 1st location 
 Ex: By changing the ref, we can add and delete the node in linked list. 
  
  - Singly Linked list
    - every node has a data and ref to next node.
  - Doubly Linked list 
    - every node has a data and 2 ref.
      - 1st ref points to previous node. 
      - 2nd ref points to next node. 