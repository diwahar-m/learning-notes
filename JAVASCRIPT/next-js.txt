app router 
file system routing
baseUrl in config.json

middleware.ts 

Routing files => layout, template, error, loading, not-found, page (lte, lnp)

[folder] => dynamic route
[ ... folder] => catch all route segment

(folder) => group routes 
_folder => out of routing

import { Geist } from 'next/font/google'

import localFont from 'next/font/local'

use client components when handling ("use client"),
  state and event handlers
  lifecycle logic
  browser only API
  custom hooks

RSC payload used by React on the client to update the browser's DOM 
RSC Payload is prefetched and cached for instant navigation.

Hydration is React's process for attaching event handlers to the DOM

React context is not supported in Server Components.

import 'server-only' 
API_KEY

layouts and pages are rendered in parallel
Promise.all[]

for fetch request,
  { cache: 'force-cache' }
  { next: { revalidate: 3600 } }

"use server" => to mark the function as a Server Function

useActionState()

partial pre rendering

matcher allows you to filter Middleware to run on specific paths.

instrumentation-client.js (or) useReportWebVitals 
process.env.NEXT_RUNTIME

authentication & authorization
stateless & database sessions

Middleware runs on every route

Due to Partial Rendering, be cautious when doing checks in Layouts
consider a shared layout
authorization in the route handler ex:(route.js)

 Next.js saves a cache to .next/cache that is shared between builds.

CSP -  series of instructions from a website to a browser,

nounce - unique, random string
added to csp header in middleware 

 to load environment variables outside of the Next.js runtime, use the @next/env package.
use $ to reference other variables e.g. $VARIABLE inside of your .env* files.

.env.test
.env.development
.env.production

Object.fromEntries(formData)

useFormStatus()

invalidate pages on-demand with the revalidatePath function

// middleware.js
let headers = { 'accept-language': 'en-US,en;q=0.5' }

2 Lazy loading types 
1) 
import dynamic from 'next/dynamic'
const ComponentA = dynamic(() => import('../components/A'))
2)
import { lazy } from 'react';
const ComponentA = lazy(() => import('../components/A'));
<Suspense fallback={<Loading />}>
  <h2>Preview</h2>
  <ComponentA />
</Suspense>

React.lazy() is SSR by default,
To make it client component,
const ComponentC = dynamic(() => import('../components/C'), { ssr: false })
ssr: false option is not supported in Server Components

 // Loading external libraries dynamically
    const Fuse = (await import('fuse.js')).default 

// custom loading
const WithCustomLoading = dynamic(
  () => import('../ComponentA'),
  {
    loading: () => <p>Loading...</p>,
  }
)

// named import 
const ClientComponent = dynamic(() =>
  import('../components/hello').then((mod) => mod.Hello)
)

// improves local performance
npm run dev --turbopack

// Do this:
import Icon1 from 'react-icons/md/Icon1'

useRouter()
usePathname()
useSearchParams()

network waterfall 

SSG 
 - getStaticProps()
 - HTML pre re

SSR
 - getServerSideProps()
 - renders HTML for each request
 - faster initial load
 - for constantly changing data pages

CSR 
  - server sends min HTML page 
  - browser executes JS to render the content
  - high interaction

rewrites()

packages imported inside Server Components and Route Handlers are automatically bundled by Next.js 

@next/bundle-analyzer
ANALYZE=true npm run build

optimizePackageImports
serverExternalPackages

Server components don't require JavaScript to render on the client. 

Prefetching - When link to a new route enters user's viewport, Next.js prefetches the route in background. This makes navigation to new routes almost instant. 

Caching - Server & Client Components, static assets & more.

layout.js
 - to share UI across pages,
 - partial rendering

<Link>
 - client side navigation

check the placement of your "use client" boundaries

Wrap dynamic API within <Suspense> boundaries.

avoid Route handlers from server components 

Loading UI & Suspense

PWA 
 - accessibility for native mobile apps
 - cross platform
app/manifest.ts

"web-push" package for notifications.

configure security headers using the next.config.js file 
module.exports = {
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
        ],
      },
      {
        source: '/sw.js',
        headers: [
          {
            key: 'Content-Type',
            value: 'application/javascript; charset=utf-8',
          },
        ],
      },
    ]
  },
}

redirect()
 - server components,
 - during rendering process of Client components 

permanentRedirect() 
useRouter()

const nextConfig: NextConfig = {
  async redirects() {
    return [
      {
        source: '/about',
        destination: '/',
        permanent: true,
      },
    ]
  },
}
redirects runs before Middleware.
NextResponse.redirect() in middleware.ts

To load a third-party script,
import Script from 'next/script'
 <Script src="https://example.com/script.js" strategy="worker" />

By default, environment variables are only available on the server. 
To expose an environment variable to the browser, it must be prefixed with NEXT_PUBLIC_

Single Page Application:
 - CSR (handled by JS, 1 HTML file)
 - No full page reloads

 Client components are prerendered during next build

 Next.js generates an HTML file per route

 webAPI - window, localStorage, Navigator

 unit testing - component & integration 
 E2E testing
 snapshot testing 

 Streaming allows you to break down the page's HTML into smaller chunks
 Streaming is commonly used in combination with Large Language Models (LLMs), such as OpenAI

 Route Handlers
  - There cannot be a route.js file at the same route as page.js 
  - GET, POST, PUT, PATCH, DELETE, HEAD, and OPTIONS
  - import { cookies } from 'next/headers' 
  - import { headers } from 'next/headers'
  - THis is server side only.
--- (option-1) ---
app/
  api/
    my-route/
      route.js   ← API route handler
  my-route/
    page.js      ← Page component
--- (option-2) ---
app/
  my-route/
    page.js      ← Page component
    api/
      route.js   ← API route handler
--- (option-3) ---
// app/my-route/page.js
export default function Page() {
  async function handleSubmit(data) {
    'use server'
    // Server-side logic here
  }

  return <form action={handleSubmit}>...</form>
---
// app/hello/page.js
export default async function Page() {
  // This explicitly calls the route handler
  const res = await fetch('/api/hello');
  const data = await res.json();
  
  return <div>{data.message}</div>;
}
---

Middleware 
 - not for session management 
 - Middleware will be invoked for every route 
 - matcher allows you to filter Middleware to run on specific paths. 
 - 2nd prop - NextFetchEvent (waitUntil)

use Server Actions when you need to handle user-triggered mutations, form submissions 
Works even if JavaScript hasn't loaded on the client

Server Components support progressive enhancement by default, meaning the form will be submitted even if JavaScript hasn't loaded yet or is disabled. 

Request memoization(GET method) is a React feature

Data cache

Time based revalidation
fetch('https://...', { next: { revalidate: 3600 } })

On-demand Revalidation
 - revalidateTag()
 - revalidatePath()

Opting out
 - await fetch('https://api.vercel.app/blog', { cache: 'no-store' })