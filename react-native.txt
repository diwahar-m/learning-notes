REACT NATIVE:

import React from 'react'; // must use this for JSX

ImageBackground
Button - onPress, onLongPress
TextInput - onChangeText, onSubmitEditing

ScrollView - pagingEnabled // swiping gestures for pages
react-native-pager-view // for invdividual item horizontal scroll.

ViewPager
FlatList
 - data, renderItem, keyExtractor
 - use renderItem with useCallback
SectionList - sections, renderSectionHeader
npm start -- --port=8088
npm run android -- --verbose => (to know more about the errors)


import {Platform} from 'react-native';

Platform.OS
Platform.Version 


...Platform.select({
      ios: {
        backgroundColor: 'red',
      },
      android: {
        backgroundColor: 'green',
      },
      default: {
        // other platforms, web for example
        backgroundColor: 'blue',
      },
    })

const Component = Platform.select({
  ios: () => require('ComponentIOS'),
  android: () => require('ComponentAndroid'),
})();

Platform.Versions

BigButton.ios.js
BigButton.android.js
BigButton.native.js

// @refresh reset 
 - fully remount the component instead of trying to preserve its state during hot reloads
 - tweaking an animation that only happens on mount
 - Force full module reload 
 - clears any retained state or cache 


packages => https://reactnative.directory/ , npm registry

ImageBackground

Having an error boundary can prevent you from always getting kicked out to the root app screen

babel-plugin-module-resolver //  as a dev dependency 
react-native-clean-project //  clear project's cache 

- on Android, negative margin is not supported. 

react-native-cameraroll  

react-navigation &&  react-native-navigation

npm install @react-navigation/native @react-navigation/native-stack
npm install react-native-screens react-native-safe-area-context

https://reactnavigation.org/docs/stack-navigator 
NavigationContainer
createNativeStackNavigator
createBottomTabNavigator
createDrawerNavigator
createMaterialTopTabNavigator
navigation.navigate(<component>,{<props>}) // each Screen receives this navigation props


Animated
Animated.createAnimatedComponent()

const fadeAnim = useAnimatedValue(0); 

STD
Animated.timing(this.state.xPosition, {
  toValue: 100,
  easing: Easing.back(),
  duration: 2000,
  useNativeDriver: true,
}).start();

Animated.decay(position, {
      velocity: 1,       // Initial speed
      deceleration: 0.9, // Slowing rate (0-1)
    }).start();

Animated.spring(...)
Animated.sequence([...])
Animated.parallel([...])

value.interpolate({
  inputRange: [0, 1],
  outputRange: [0, 100],
});

 const pan = useRef(new Animated.ValueXY()).current;
  const panResponder = useRef(
    PanResponder.create({
      onMoveShouldSetPanResponder: () => true,
      onPanResponderMove: Animated.event([null, {dx: pan.x, dy: pan.y}]),
      onPanResponderRelease: () => {
        Animated.spring(pan, {
          toValue: {x: 0, y: 0},
          useNativeDriver: true,
        }).start();
      },LayoutAnimation &
    }),
  ).current;

  return (
    <View style={styles.container}>
      <Text style={styles.titleText}>Drag & Release this box!</Text>
      <Animated.View
        style={{
          transform: [{translateX: pan.x}, {translateY: pan.y}],
        }}
        {...panResponder.panHandlers}>
        <View style={styles.box} />
      </Animated.View>
    </View>)

<Animated.View
  style={{
    transform: [
      {scale: this.state.scale},
      {rotateY: this.state.rotateY},
      {perspective: 1000}, // without this line this Animation will not render on Android while working fine on iOS
    ],
  }}
/>

Animated 
 - works with direct events, 
 - it doesn't change flex & position. 

LayoutAnimation
 - for fire & forget animations.
 

react-native-dotenv 
react-native-config 

@react-native-async-storage/async-storage  
 - for non sensitive data 
 react-native-mmkv
  - for both datas

PKCE 
 - an extension to the OAuth 2.

SSL Pinning 
 - request with trusted certificate 

LogBox 

npx react-native log-android

debugger; 



Async storage 
 - for storing non sensitive data 

react-native-keychain 
 - for storing sensitive data 



SSL - https://

(aria - web)
(accessibility - react-native)   


# For Android:
npx react-native log-android
# Or, for iOS:
npx react-native log-ios

metro-symbolicate // for release buildss


Jest // Testing 
Test Renderer 
React Natiive Testing Library 
Detox 


redux-logger 
babel-plugin-transform-remove-console // removes console.* calls in prod 

FlatList Vs FlashList Vs LegendList 

yarn react-native run-android --active-arch-only 
 - reduces native build time 
 - not for prod 

Gradle
 - gradle build done by configuration & Execution phase

android/gradle.properties file:
 - org.gradle.configuration-cache=true // to skip configuration phase on subsequent builds 

 ccache 
 sccache

android/app/build 

FlatList optimization 
 - getItemLayout
 - keyExtractor
 - useCallback for renderItem


react-native-fast-image 


Hermes 
 - open-source JavaScript engine optimized for React Native. 
 - npm run android -- --mode="release" 
 - compile JavaScript to Hermes Bytecode during build time which will improve your app's startup speed on device

Hermes 


React's lazy with Suspense :
const MarkdownPreview = lazy(() => delayForDemo(import('./MarkdownPreview.js')));

  return (
        <Suspense fallback={<Loading />}>
          <MarkdownPreview markdown={markdown} />
        </Suspense>
      )

// Add a fixed delay so you can see the loading state
function delayForDemo(promise) {
  return new Promise(resolve => {
    setTimeout(resolve, 2000);
  }).then(() => promise);
}

require call will be evaluated lazily

Profiling

Codegen in react-native 
 - generates boilerplate specific to native apps.








nativewind package 
 - to use tailwind css.